#!/bin/sh
#
#get_network_interfaces_errors
# 1.1.1.1 接口概念
# 物理层网络接口错误指标
#  1.1.1.2 输入
#  无
#   1.1.1.3 输出
#   采集时间、
#   inerr/s（每秒收到的“坏”的包的个数）、
#   oterr/s（每秒发送的“坏”的包的个数）、
#   coll/s（每秒发送时产生的碰撞冲突产生的个数）、
#   indrop/s（每秒收到的包中因为本地缓存队列溢出而丢弃的包的个数）、
#   otdrop/s（每秒发送的包中因为本地缓存队列溢出而丢弃的包的个数）、
#   infram/s（每秒在收到的包中发生的帧对齐错误-FCS的个数）、
#   otcarr/s（每秒在发送的包中发生的carrier-errors的个数）
exists()
{
	type $1 2&>1 /dev/null
}
AIX(){ df -k|tail +2|sed 's/%//g';}
Digital(){ :;}
FreeBSD(){ :;}
HP_UX(){ :;}
Irix(){ :;}
Linux(){ sar -SL 1 1|grep eth;}
#Linux(){ dx -kP|tail -n+2|sed 's/%//g'; echo $?;}
OS390(){ :;}
SCO_SV(){ df -kP|tail -n+2|sed 's/%//g';}
SunOS(){ df -k|tail +2|sed 's/%//g';}
Tru64(){ :;}
UnixWare(){ df -kP|tail -n+2|sed 's/%//g';}
#Win32
default(){ df -k|tail +2|sed 's/%//g';}

INTERVAL=10	# Defines the total number of sampling intervals
HOST=`hostname`
OS=`uname`	# Defines the UNIX flavor
SECS=30		# Defines the number of seconds for each sample
STATCOUNT=0	# Initialize a loop counter to 0, zero

###################################################
##### SETUP THE ENVIRONMENT FOR EACH OS HERE ######
###################################################
#$OS
x=`$OS $*|tr "\n" " "`
echo $x|sed "s/[0123456789:\-]* /${DATE} /"

# These "F-numbers" point to the correct field in the
# command output for each UNIX flavor.

       #echo " The Operating System is $OS "
##Linux
#exit
#case $OS in
#AIX)
#	$AIX
#       ;;
#HP-UX)
#	$HP_UX
#       ;;
#Linux)
#	echo $Linux
#	exec $Linux
#       ;;
#SCO_SV)
#	$SCO_SV
#       ;;
#SunOS)  
#	$SunOS
#       ;;
#UnixWare)
#	$UnixWare
#       ;;
#*)# echo " ERROR: $OS is not a supported operating system "
#	$default
#  # echo " ...EXITING... "
#   exit 1
#   ;;
#esac
#
####################################################
######### BEGIN GATHERING STATISTICS HERE ##########
####################################################
