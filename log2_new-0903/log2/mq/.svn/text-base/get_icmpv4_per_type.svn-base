#!/bin/sh
#
#get_ICMPv4_Per_type
# 1.1.1.1 接口概念
# ICMP层活动状况其他类型统计指标
#  1.1.1.2 输入
#  无
#   1.1.1.3 输出
#   采集时间、
#   ierr/s（每秒收到的消息中包含ICMP特性错误的数量）
#   isq/s（每秒收到的ICMP源结束消息的数量）
#   ird/s（每秒收到的ICMP重定向消息的数量）
#   idu/s（每秒收到的ICMP目标不可到达的消息的数量）
#   ite/s（每秒收到的超时消息的数量）
#   oerr/s（每秒发送的消息中包含ICMP特性错误的数量）
#   osq/s（每秒发送的ICMP源结束消息的数量）
#   ord/s（每秒发送的ICMP重定向消息的数量）
#   odu/s（每秒发送的ICMP目标不可到达的消息的数量）
#   ote/s（每秒发送的超时消息的数量）
exists()
{
	type $1 2&>1 /dev/null
}
AIX(){ df -k|tail +2|sed 's/%//g';}
#Digital(){ ;}
FreeBSD(){ :;}
HP_UX(){ :;}
#Irix(){ :;}
Linux(){ sar -SM 1 1|tail -1;}
#Linux(){ dx -kP|tail -n+2|sed 's/%//g'; echo $?;}
#OS390(){ ;}
SCO_SV(){ df -kP|tail -n+2|sed 's/%//g';}
SunOS(){ echo '-' '-' '-' '-' '-' '-' '-' '-' '-' '-';}
#Tru64(){ ;}
UnixWare(){ df -kP|tail -n+2|sed 's/%//g';}
#Win32
default(){ df -k|tail +2|sed 's/%//g';}

INTERVAL=10	# Defines the total number of sampling intervals
HOST=`hostname`
OS=`uname`	# Defines the UNIX flavor
SECS=30		# Defines the number of seconds for each sample
STATCOUNT=0	# Initialize a loop counter to 0, zero
DATE=`date "+%Y-%m-%d %H:%M:%S"`

###################################################
##### SETUP THE ENVIRONMENT FOR EACH OS HERE ######
###################################################
#$OS
#$OS|tr "\n" " "|sed "s/[0123456789:\-]* /${DATE} /"
x=`$OS|tr "\n" " "`
echo $x|sed "s/[0123456789:\-]* /${DATE} /"

# These "F-numbers" point to the correct field in the
# command output for each UNIX flavor.

       #echo " The Operating System is $OS "
##Linux
#exit
#case $OS in
#AIX)
#	$AIX
#       ;;
#HP-UX)
#	$HP_UX
#       ;;
#Linux)
#	echo $Linux
#	exec $Linux
#       ;;
#SCO_SV)
#	$SCO_SV
#       ;;
#SunOS)  
#	$SunOS
#       ;;
#UnixWare)
#	$UnixWare
#       ;;
#*)# echo " ERROR: $OS is not a supported operating system "
#	$default
#  # echo " ...EXITING... "
#   exit 1
#   ;;
#esac
#
####################################################
######### BEGIN GATHERING STATISTICS HERE ##########
####################################################
